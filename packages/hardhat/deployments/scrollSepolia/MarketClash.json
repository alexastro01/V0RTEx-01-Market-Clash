{
  "address": "0x265de91C3aD0baE6aFa9B37Ae854F28F135E8027",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "attributes",
      "outputs": [
        {
          "internalType": "enum MarketClash.Class",
          "name": "Class",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "attack",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "defence",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "classMapping",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_arrayOfCards",
          "type": "uint256[]"
        }
      ],
      "name": "createDeck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deckOfPlayer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBtcPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getETHPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLinkPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "getStatBtc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "getStatETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "getStatLink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "imageMapping",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "enum MarketClash.Class",
          "name": "_class",
          "type": "uint8"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MarketClash.Class",
          "name": "_firstCardClass",
          "type": "uint8"
        },
        {
          "internalType": "enum MarketClash.Class",
          "name": "_secondCardClass",
          "type": "uint8"
        },
        {
          "internalType": "enum MarketClash.Class",
          "name": "_thirdCardClass",
          "type": "uint8"
        }
      ],
      "name": "openPack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdAttack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdDefense",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "uintToArray",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x054f6bcdc432bdd4f41f91d4d00344a4824ec635a1d27e944026fe024f36bd56",
  "receipt": {
    "to": null,
    "from": "0x898c6F7bD2cDaEfcA404699825efFc841d7eA299",
    "contractAddress": "0x265de91C3aD0baE6aFa9B37Ae854F28F135E8027",
    "transactionIndex": 0,
    "gasUsed": "2790735",
    "logsBloom": "0x
    "blockHash": "0x7b58cf187038e109bfc16cdfcaf4f1db8c35e8d5469371597f6539e7c5504471",
    "transactionHash": "0x054f6bcdc432bdd4f41f91d4d00344a4824ec635a1d27e944026fe024f36bd56",
    "logs": [],
    "blockNumber": 4011767,
    "cumulativeGasUsed": "2790735",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "bdd223e646ed430580d177e6c2134663",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"attributes\",\"outputs\":[{\"internalType\":\"enum MarketClash.Class\",\"name\":\"Class\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"attack\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"defence\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"classMapping\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_arrayOfCards\",\"type\":\"uint256[]\"}],\"name\":\"createDeck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deckOfPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBtcPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"getStatBtc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"getStatETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"getStatLink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"imageMapping\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"enum MarketClash.Class\",\"name\":\"_class\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MarketClash.Class\",\"name\":\"_firstCardClass\",\"type\":\"uint8\"},{\"internalType\":\"enum MarketClash.Class\",\"name\":\"_secondCardClass\",\"type\":\"uint8\"},{\"internalType\":\"enum MarketClash.Class\",\"name\":\"_thirdCardClass\",\"type\":\"uint8\"}],\"name\":\"openPack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdAttack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdDefense\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"uintToArray\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketClash.sol\":\"MarketClash\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function description() external view returns (string memory);\\r\\n\\r\\n  function version() external view returns (uint256);\\r\\n\\r\\n  function getRoundData(\\r\\n    uint80 _roundId\\r\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n}\",\"keccak256\":\"0x4542697bfb1a53476a1d3d7c72bc13921e0c9c8fa7a628f76a63a5339487bc83\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/MarketClash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\n// Deploy this contract on Scroll Sepolia\\r\\n\\r\\n// Importing OpenZeppelin contracts\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\r\\n\\r\\n// Importing Chainlink contracts\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract MarketClash is ERC721, ERC721URIStorage  {\\r\\n\\r\\n\\r\\n\\r\\n  //pass array of enums\\r\\n   enum Class {\\r\\n        Btc,\\r\\n        Eth,\\r\\n        Link\\r\\n    }\\r\\n\\r\\n    struct Attr {\\r\\n        Class Class; \\r\\n        uint8 attack;\\r\\n        uint8 defence; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    Counters.Counter public tokenIdCounter;\\r\\n    \\r\\n    //card mappings\\r\\n    mapping(uint256 => Attr) public attributes;\\r\\n    mapping(uint256 => string) public imageMapping;\\r\\n    mapping(uint256 => string) public classMapping;\\r\\n    mapping(uint256 => uint256) public tokenIdAttack;\\r\\n    mapping(uint256 => uint256) public tokenIdDefense;\\r\\n    \\r\\n\\r\\n    //player mappings\\r\\n    mapping(address => uint[]) public deckOfPlayer;\\r\\n\\r\\n\\r\\n    // Create price feed\\r\\n    AggregatorV3Interface internal priceFeedBtc;\\r\\n    AggregatorV3Interface internal priceFeedETH;\\r\\n    AggregatorV3Interface internal priceFeedLink;\\r\\n\\r\\n\\r\\n\\r\\n    // https://docs.chain.link/data-feeds/price-feeds/addresses?network=ethereum&page=1\\r\\n    /**\\r\\n     * Network: Scroll Sepolia\\r\\n     * Aggregator: BTC/USD\\r\\n     \\r\\n     */\\r\\n  \\r\\n    address btcuscAddress = 0x87dce67002e66C17BC0d723Fe20D736b80CAaFda;\\r\\n    address ethusdAddress = 0x59F1ec1f10bD7eD9B938431086bC1D9e233ECf41;\\r\\n    address linkusdAddress = 0xaC3E04999aEfE44D508cB3f9B972b0Ecd07c1efb;\\r\\n\\r\\n    uint highMultiplier = 3;\\r\\n    uint mediumMultiplier = 2;\\r\\n    uint lowMultiplier = 1;\\r\\n\\r\\n    string btcImage = \\\"https://fuchsia-defeated-ermine-208.mypinata.cloud/ipfs/QmdztjsyvKcLzjpcAfN2yWEgrGc46vAyKTUGZ6aYFCStu3/1.png\\\";\\r\\n    string ethImage = \\\"https://fuchsia-defeated-ermine-208.mypinata.cloud/ipfs/QmdztjsyvKcLzjpcAfN2yWEgrGc46vAyKTUGZ6aYFCStu3/2.png\\\";\\r\\n    string linkImage = \\\"https://fuchsia-defeated-ermine-208.mypinata.cloud/ipfs/QmdztjsyvKcLzjpcAfN2yWEgrGc46vAyKTUGZ6aYFCStu3/3.png\\\";\\r\\n\\r\\n    uint currentTokenId = 0;\\r\\n\\r\\n\\r\\n    constructor() ERC721(\\\"MarketClash\\\", \\\"MK\\\") {\\r\\n        priceFeedBtc = AggregatorV3Interface(btcuscAddress);\\r\\n        priceFeedETH = AggregatorV3Interface(ethusdAddress);\\r\\n        priceFeedLink = AggregatorV3Interface(linkusdAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n   //function generate a Card \\r\\n   \\r\\n    function mint(\\r\\n        address to, \\r\\n        Class _class\\r\\n        ) \\r\\n    public {\\r\\n        require(_class == Class.Btc || _class == Class.Eth || _class == Class.Link, \\\"Invalid class\\\");\\r\\n        currentTokenId++;\\r\\n        uint tokenId = currentTokenId;\\r\\n        uint256 attack;\\r\\n        uint256 defence;\\r\\n\\r\\n         if(_class == Class.Btc) {\\r\\n            attack = getStatBtc(lowMultiplier);\\r\\n            defence = getStatBtc(highMultiplier);\\r\\n            tokenIdAttack[tokenId] = attack;\\r\\n            tokenIdDefense[tokenId] = defence;\\r\\n            classMapping[tokenId] = \\\"Btc\\\";\\r\\n            imageMapping[tokenId] = btcImage;\\r\\n         } else if (_class == Class.Eth) {\\r\\n            attack = getStatETH(mediumMultiplier);\\r\\n            defence = getStatETH(mediumMultiplier);\\r\\n            tokenIdAttack[tokenId] = attack;\\r\\n            tokenIdDefense[tokenId] = defence;\\r\\n            classMapping[tokenId] = \\\"Eth\\\";\\r\\n            imageMapping[tokenId] = ethImage;\\r\\n         } else if (_class == Class.Link){\\r\\n            attack = getStatLink(highMultiplier);\\r\\n            defence = getStatLink(lowMultiplier);\\r\\n            tokenIdAttack[tokenId] = attack;\\r\\n            tokenIdDefense[tokenId] = defence;\\r\\n            classMapping[tokenId] = \\\"Link\\\";\\r\\n            imageMapping[tokenId] = linkImage;\\r\\n         }\\r\\n\\r\\n\\r\\n         \\r\\n\\r\\n    \\r\\n        attributes[tokenId] = Attr(_class, uint8(attack), uint8(defence));\\r\\n        _safeMint(to, tokenId);\\r\\n    }\\r\\n\\r\\n    \\r\\n    function createDeck(uint[] calldata _arrayOfCards) public {\\r\\n         require(_arrayOfCards.length == 3, \\\"Deck size must be 3\\\");\\r\\n         require(ownerOf(_arrayOfCards[0]) == msg.sender, \\\"You must own the card to add it to deck\\\");\\r\\n         require(ownerOf(_arrayOfCards[1]) == msg.sender, \\\"You must own the card to add it to deck\\\");\\r\\n         require(ownerOf(_arrayOfCards[2]) == msg.sender, \\\"You must own the card to add it to deck\\\");\\r\\n\\r\\n        deckOfPlayer[msg.sender] = _arrayOfCards;\\r\\n        \\r\\n    }\\r\\n\\r\\n    function openPack(Class _firstCardClass, Class _secondCardClass, Class _thirdCardClass) public {\\r\\n      \\r\\n        mint(msg.sender, _firstCardClass);\\r\\n        mint(msg.sender, _secondCardClass);\\r\\n        mint(msg.sender, _thirdCardClass);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function getStatBtc(uint multiplier) public view returns(uint256) {\\r\\n        // BTC ATTACK = LOW\\r\\n        // BTC DEFENSE = HIGH\\r\\n\\r\\n        uint256 btcPrice = getBtcPrice();\\r\\n        \\r\\n        uint8[] memory arrayOfNumbers = uintToArray(btcPrice);\\r\\n\\r\\n\\r\\n        uint number1 = arrayOfNumbers[0];\\r\\n        uint number2 = arrayOfNumbers[1];\\r\\n        uint number3 = arrayOfNumbers[2];\\r\\n        uint number4 = arrayOfNumbers[3];\\r\\n\\r\\n        uint stat = (number1 + number2 + number3 + number4) * multiplier;\\r\\n\\r\\n        return stat;\\r\\n    }\\r\\n\\r\\n\\r\\n        function getStatETH(uint multiplier) public view returns(uint256) {\\r\\n        // ETH ATTACK = MEDIUM\\r\\n        // ETH DEFENSE = MEDIUM\\r\\n        \\r\\n        uint256 ethPrice = getETHPrice();\\r\\n        \\r\\n        uint8[] memory arrayOfNumbers = uintToArray(ethPrice);\\r\\n\\r\\n\\r\\n        uint number1 = arrayOfNumbers[0];\\r\\n        uint number2 = arrayOfNumbers[1];\\r\\n        uint number3 = arrayOfNumbers[2];\\r\\n        uint number4 = arrayOfNumbers[3];\\r\\n\\r\\n        uint stat = (number1 + number2 + number3 + number4) * multiplier;\\r\\n\\r\\n        return stat;\\r\\n    }\\r\\n\\r\\n       function getStatLink(uint multiplier) public view returns(uint256) {\\r\\n        // LINK ATTACK = HIGH\\r\\n        // LINK DEFENSE = LOW\\r\\n        \\r\\n        uint256 linkPrice = getLinkPrice();\\r\\n        \\r\\n        uint8[] memory arrayOfNumbers = uintToArray(linkPrice);\\r\\n\\r\\n\\r\\n        uint number1 = arrayOfNumbers[0];\\r\\n        uint number2 = arrayOfNumbers[1];\\r\\n        uint number3 = arrayOfNumbers[2];\\r\\n        uint number4 = arrayOfNumbers[3];\\r\\n\\r\\n        uint stat = (number1 + number2 + number3 + number4) * multiplier;\\r\\n\\r\\n        return stat;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n  \\r\\n  //METADATA\\r\\n  \\r\\n   \\r\\n    function tokenURI(uint256 tokenId) override(ERC721, ERC721URIStorage) public view returns (string memory) {\\r\\n        string memory json = Base64.encode(\\r\\n            bytes(string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"name\\\": \\\"', uint2str(tokenId), '\\\",',\\r\\n                    '\\\"image\\\": \\\"', imageMapping[tokenId], '\\\",',\\r\\n                    '\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Class\\\", \\\"value\\\": ', classMapping[tokenId], '},',\\r\\n                    '{\\\"trait_type\\\": \\\"Attack\\\", \\\"value\\\": ', uint2str(attributes[tokenId].attack), '},',\\r\\n                    '{\\\"trait_type\\\": \\\"Defence\\\", \\\"value\\\": ', uint2str(attributes[tokenId].defence), '},',\\r\\n                    ']}'\\r\\n                )\\r\\n            ))\\r\\n        );\\r\\n        return string(abi.encodePacked('data:application/json;base64,', json));\\r\\n    }\\r\\n\\r\\n\\r\\n    //helper functions\\r\\n\\r\\n       //Get prices function\\r\\n\\r\\n    function getBtcPrice() public view returns (uint256) {\\r\\n        (, int256 price, , , ) = priceFeedBtc.latestRoundData();\\r\\n        return uint256(price);\\r\\n    }\\r\\n\\r\\n       function getETHPrice() public view returns (uint256) {\\r\\n        (, int256 price, , , ) = priceFeedETH.latestRoundData();\\r\\n        return uint256(price);\\r\\n    }\\r\\n\\r\\n     function getLinkPrice() public view returns (uint256) {\\r\\n        (, int256 price, , , ) = priceFeedLink.latestRoundData();\\r\\n        return uint256(price);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    \\r\\n        function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k-1;\\r\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n         // Function to convert a uint to an array of its digits\\r\\n    function uintToArray(uint256 number) public pure returns (uint8[] memory) {\\r\\n        uint8[] memory digits = new uint8[](getNumDigits(number));\\r\\n\\r\\n        for (uint256 i = digits.length; i > 0; i--) {\\r\\n            digits[i - 1] = uint8(number % 10);\\r\\n            number /= 10;\\r\\n        }\\r\\n\\r\\n        return digits;\\r\\n    }\\r\\n\\r\\n    // Function to calculate the number of digits in a uint\\r\\n    function getNumDigits(uint256 number) internal pure returns (uint256) {\\r\\n        uint256 digits = 0;\\r\\n        while (number != 0) {\\r\\n            number /= 10;\\r\\n            digits++;\\r\\n        }\\r\\n        return digits;\\r\\n    }\\r\\n\\r\\n   // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // The following function is an override required by Solidity.\\r\\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage)\\r\\n    {\\r\\n        super._burn(tokenId);\\r\\n    }\\r\\n  \\r\\n}\",\"keccak256\":\"0x8aaab9bfd9271adcd8fe7158b675e65e301a9fd21cb7ae263c499e82b6a4d42c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x601180546001600160a01b03199081167387dce67002e66c17bc0d723fe20d736b80caafda179091556012805482167359f1ec1f10bd7ed9b938431086bc1d9e233ecf411790556013805490911673ac3e04999aefe44d508cb3f9b972b0ecd07c1efb179055600360145560026015556001601655610120604052606c60808181529062002ab760a03960179062000098908262000252565b506040518060a00160405280606c8152602001620029df606c9139601890620000c2908262000252565b506040518060a00160405280606c815260200162002a4b606c9139601990620000ec908262000252565b506000601a55348015620000ff57600080fd5b506040518060400160405280600b81526020016a09ac2e4d6cae886d8c2e6d60ab1b815250604051806040016040528060028152602001614d4b60f01b815250816000908162000150919062000252565b5060016200015f828262000252565b5050601154600e80546001600160a01b039283166001600160a01b031991821617909155601254600f805491841691831691909117905560135460108054919093169116179055506200031e565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001d857607f821691505b602082108103620001f957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200024d57600081815260208120601f850160051c81016020861015620002285750805b601f850160051c820191505b81811015620002495782815560010162000234565b5050505b505050565b81516001600160401b038111156200026e576200026e620001ad565b62000286816200027f8454620001c3565b84620001ff565b602080601f831160018114620002be5760008415620002a55750858301515b600019600386901b1c1916600185901b17855562000249565b600085815260208120601f198616915b82811015620002ef57888601518255948401946001909101908401620002ce565b50858210156200030e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6126b1806200032e6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063919f064911610104578063b88d4fde116100a2578063d77691ee11610071578063d77691ee14610430578063e7f3be5214610443578063e985e9c514610456578063f17f39b31461046957600080fd5b8063b88d4fde146103b2578063bb92947b146103c5578063c87b56dd146103d8578063d05dcc6a146103eb57600080fd5b80639ba82a33116100de5780639ba82a3314610364578063a22cb46514610384578063a607a8d914610397578063b16045bc1461039f57600080fd5b8063919f06491461033257806395d89b411461035257806398bdf6f51461035a57600080fd5b80633a3610bc1161017c5780636c9e4e251161014b5780636c9e4e25146102e657806370a08231146102f95780637afc86621461030c57806383acda611461031f57600080fd5b80633a3610bc146102a557806342842e0e146102ad5780636352211e146102c0578063691562a0146102d357600080fd5b8063095ea7b3116101b8578063095ea7b3146102475780631ac3a0fb1461025c57806323b872dd1461028a5780632dddd49c1461029d57600080fd5b806301ffc9a7146101df57806306fdde0314610207578063081812fc1461021c575b600080fd5b6101f26101ed366004611ae5565b61047c565b60405190151581526020015b60405180910390f35b61020f61048d565b6040516101fe9190611b59565b61022f61022a366004611b6c565b61051f565b6040516001600160a01b0390911681526020016101fe565b61025a610255366004611ba1565b610546565b005b61027c61026a366004611b6c565b600b6020526000908152604090205481565b6040519081526020016101fe565b61025a610298366004611bcb565b610660565b61027c610691565b61027c610716565b61025a6102bb366004611bcb565b61076c565b61022f6102ce366004611b6c565b610787565b61025a6102e1366004611c16565b6107e7565b61025a6102f4366004611c49565b610b01565b61027c610307366004611cbe565b610c22565b61020f61031a366004611b6c565b610ca8565b61027c61032d366004611b6c565b610d42565b61027c610340366004611b6c565b600c6020526000908152604090205481565b61020f610e20565b60075461027c9081565b610377610372366004611b6c565b610e2f565b6040516101fe9190611cd9565b61025a610392366004611d20565b610ee9565b61027c610ef8565b61027c6103ad366004611b6c565b610f4e565b61025a6103c0366004611d72565b610f59565b61027c6103d3366004611b6c565b610f91565b61020f6103e6366004611b6c565b610f9c565b6104216103f9366004611b6c565b60086020526000908152604090205460ff808216916101008104821691620100009091041683565b6040516101fe93929190611e64565b61020f61043e366004611b6c565b611050565b61027c610451366004611ba1565b611069565b6101f2610464366004611e9e565b61109a565b61025a610477366004611ec8565b6110c8565b6000610487826110e6565b92915050565b60606000805461049c90611f0b565b80601f01602080910402602001604051908101604052809291908181526020018280546104c890611f0b565b80156105155780601f106104ea57610100808354040283529160200191610515565b820191906000526020600020905b8154815290600101906020018083116104f857829003601f168201915b5050505050905090565b600061052a8261110b565b506000908152600460205260409020546001600160a01b031690565b600061055182610787565b9050806001600160a01b0316836001600160a01b0316036105c35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105df57506105df813361109a565b6106515760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016105ba565b61065b838361116d565b505050565b61066a33826111db565b6106865760405162461bcd60e51b81526004016105ba90611f45565b61065b83838361123a565b600080601060009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b9190611fac565b509195945050505050565b600080600e60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106e7573d6000803e3d6000fd5b61065b83838360405180602001604052806000815250610f59565b6000818152600260205260408120546001600160a01b0316806104875760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105ba565b60008160028111156107fb576107fb611e4e565b14806108185750600181600281111561081657610816611e4e565b145b806108345750600281600281111561083257610832611e4e565b145b6108705760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420636c61737360981b60448201526064016105ba565b601a805490600061088083612012565b9091555050601a546000808084600281111561089e5761089e611e4e565b03610927576108ae601654610f91565b91506108bb601454610f91565b6000848152600b60209081526040808320869055600c825280832084905580518082018252600381526242746360e81b81840152878452600a9092529091209192506109079082612079565b506000838152600960205260409020610921601782612139565b50610a58565b600184600281111561093b5761093b611e4e565b036109be5761094b601554610d42565b9150610958601554610d42565b6000848152600b60209081526040808320869055600c825280832084905580518082018252600381526208ae8d60eb1b81840152878452600a9092529091209192506109a49082612079565b506000838152600960205260409020610921601882612139565b60028460028111156109d2576109d2611e4e565b03610a58576109e2601454610f4e565b91506109ef601654610f4e565b6000848152600b60209081526040808320869055600c82528083208490558051808201825260048152634c696e6b60e01b81840152878452600a909252909120919250610a3c9082612079565b506000838152600960205260409020610a56601982612139565b505b6040518060600160405280856002811115610a7557610a75611e4e565b815260ff808516602080840191909152908416604092830152600086815260089091522081518154829060ff19166001836002811115610ab757610ab7611e4e565b02179055506020820151815460409093015162ffff001990931661010060ff9283160262ff0000191617620100009190931602919091179055610afa858461139e565b5050505050565b60038114610b475760405162461bcd60e51b81526020600482015260136024820152724465636b2073697a65206d757374206265203360681b60448201526064016105ba565b33610b688383600081610b5c57610b5c61220c565b90506020020135610787565b6001600160a01b031614610b8e5760405162461bcd60e51b81526004016105ba90612222565b33610ba583836001818110610b5c57610b5c61220c565b6001600160a01b031614610bcb5760405162461bcd60e51b81526004016105ba90612222565b33610be283836002818110610b5c57610b5c61220c565b6001600160a01b031614610c085760405162461bcd60e51b81526004016105ba90612222565b336000908152600d6020526040902061065b908383611a6f565b60006001600160a01b038216610c8c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105ba565b506001600160a01b031660009081526003602052604090205490565b600a6020526000908152604090208054610cc190611f0b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ced90611f0b565b8015610d3a5780601f10610d0f57610100808354040283529160200191610d3a565b820191906000526020600020905b815481529060010190602001808311610d1d57829003601f168201915b505050505081565b600080610d4d610ef8565b90506000610d5a82610e2f565b9050600081600081518110610d7157610d7161220c565b602002602001015160ff169050600082600181518110610d9357610d9361220c565b602002602001015160ff169050600083600281518110610db557610db561220c565b602002602001015160ff169050600084600381518110610dd757610dd761220c565b602002602001015160ff16905060008882848688610df59190612269565b610dff9190612269565b610e099190612269565b610e13919061227c565b9998505050505050505050565b60606001805461049c90611f0b565b60606000610e3c836113b8565b67ffffffffffffffff811115610e5457610e54611d5c565b604051908082528060200260200182016040528015610e7d578160200160208202803683370190505b5080519091505b8015610ee257610e95600a856122a9565b82610ea16001846122bd565b81518110610eb157610eb161220c565b60ff90921660209283029190910190910152610ece600a856122d0565b935080610eda816122e4565b915050610e84565b5092915050565b610ef43383836113e1565b5050565b600080600f60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106e7573d6000803e3d6000fd5b600080610d4d610691565b610f6333836111db565b610f7f5760405162461bcd60e51b81526004016105ba90611f45565b610f8b848484846114af565b50505050565b600080610d4d610716565b60606000611026610fac846114e2565b6000858152600960209081526040808320600a83528184206008909352922054610fdd90610100900460ff166114e2565b600088815260086020526040902054610ffe9062010000900460ff166114e2565b60405160200161101295949392919061238a565b60405160208183030381529060405261160e565b90508060405160200161103991906124ec565b604051602081830303815290604052915050919050565b60096020526000908152604090208054610cc190611f0b565b600d602052816000526040600020818154811061108557600080fd5b90600052602060002001600091509150505481565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6110d233846107e7565b6110dc33836107e7565b61065b33826107e7565b60006001600160e01b03198216632483248360e11b1480610487575061048782611760565b6000818152600260205260409020546001600160a01b031661116a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105ba565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906111a282610787565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111e783610787565b9050806001600160a01b0316846001600160a01b0316148061120e575061120e818561109a565b806112325750836001600160a01b03166112278461051f565b6001600160a01b0316145b949350505050565b826001600160a01b031661124d82610787565b6001600160a01b0316146112735760405162461bcd60e51b81526004016105ba90612531565b6001600160a01b0382166112d55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105ba565b826001600160a01b03166112e882610787565b6001600160a01b03161461130e5760405162461bcd60e51b81526004016105ba90612531565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610ef48282604051806020016040528060008152506117b0565b6000805b8215610487576113cd600a846122d0565b9250806113d981612012565b9150506113bc565b816001600160a01b0316836001600160a01b0316036114425760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105ba565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6114ba84848461123a565b6114c6848484846117e3565b610f8b5760405162461bcd60e51b81526004016105ba90612576565b6060816000036115095750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611533578061151d81612012565b915061152c9050600a836122d0565b915061150d565b60008167ffffffffffffffff81111561154e5761154e611d5c565b6040519080825280601f01601f191660200182016040528015611578576020820181803683370190505b509050815b85156116055761158e6001826122bd565b9050600061159d600a886122d0565b6115a890600a61227c565b6115b290886122bd565b6115bd9060306125c8565b905060008160f81b9050808484815181106115da576115da61220c565b60200101906001600160f81b031916908160001a9053506115fc600a896122d0565b9750505061157d565b50949350505050565b6060815160000361162d57505060408051602081019091526000815290565b600060405180606001604052806040815260200161263c604091399050600060038451600261165c9190612269565b61166691906122d0565b61167190600461227c565b67ffffffffffffffff81111561168957611689611d5c565b6040519080825280601f01601f1916602001820160405280156116b3576020820181803683370190505b509050600182016020820185865187015b8082101561171f576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506116c4565b505060038651066001811461173b576002811461174e5761070b565b603d6001830353603d600283035361070b565b603d6001830353509195945050505050565b60006001600160e01b031982166380ac58cd60e01b148061179157506001600160e01b03198216635b5e139f60e01b145b8061048757506301ffc9a760e01b6001600160e01b0319831614610487565b6117ba83836118e4565b6117c760008484846117e3565b61065b5760405162461bcd60e51b81526004016105ba90612576565b60006001600160a01b0384163b156118d957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906118279033908990889088906004016125e1565b6020604051808303816000875af1925050508015611862575060408051601f3d908101601f1916820190925261185f9181019061261e565b60015b6118bf573d808015611890576040519150601f19603f3d011682016040523d82523d6000602084013e611895565b606091505b5080516000036118b75760405162461bcd60e51b81526004016105ba90612576565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611232565b506001949350505050565b6001600160a01b03821661193a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105ba565b6000818152600260205260409020546001600160a01b03161561199f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105ba565b6000818152600260205260409020546001600160a01b031615611a045760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105ba565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054828255906000526020600020908101928215611aaa579160200282015b82811115611aaa578235825591602001919060010190611a8f565b50611ab6929150611aba565b5090565b5b80821115611ab65760008155600101611abb565b6001600160e01b03198116811461116a57600080fd5b600060208284031215611af757600080fd5b8135611b0281611acf565b9392505050565b60005b83811015611b24578181015183820152602001611b0c565b50506000910152565b60008151808452611b45816020860160208601611b09565b601f01601f19169290920160200192915050565b602081526000611b026020830184611b2d565b600060208284031215611b7e57600080fd5b5035919050565b80356001600160a01b0381168114611b9c57600080fd5b919050565b60008060408385031215611bb457600080fd5b611bbd83611b85565b946020939093013593505050565b600080600060608486031215611be057600080fd5b611be984611b85565b9250611bf760208501611b85565b9150604084013590509250925092565b803560038110611b9c57600080fd5b60008060408385031215611c2957600080fd5b611c3283611b85565b9150611c4060208401611c07565b90509250929050565b60008060208385031215611c5c57600080fd5b823567ffffffffffffffff80821115611c7457600080fd5b818501915085601f830112611c8857600080fd5b813581811115611c9757600080fd5b8660208260051b8501011115611cac57600080fd5b60209290920196919550909350505050565b600060208284031215611cd057600080fd5b611b0282611b85565b6020808252825182820181905260009190848201906040850190845b81811015611d1457835160ff1683529284019291840191600101611cf5565b50909695505050505050565b60008060408385031215611d3357600080fd5b611d3c83611b85565b915060208301358015158114611d5157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611d8857600080fd5b611d9185611b85565b9350611d9f60208601611b85565b925060408501359150606085013567ffffffffffffffff80821115611dc357600080fd5b818701915087601f830112611dd757600080fd5b813581811115611de957611de9611d5c565b604051601f8201601f19908116603f01168101908382118183101715611e1157611e11611d5c565b816040528281528a6020848701011115611e2a57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b634e487b7160e01b600052602160045260246000fd5b6060810160038510611e8657634e487b7160e01b600052602160045260246000fd5b93815260ff9283166020820152911660409091015290565b60008060408385031215611eb157600080fd5b611eba83611b85565b9150611c4060208401611b85565b600080600060608486031215611edd57600080fd5b611ee684611c07565b9250611ef460208501611c07565b9150611f0260408501611c07565b90509250925092565b600181811c90821680611f1f57607f821691505b602082108103611f3f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b805169ffffffffffffffffffff81168114611b9c57600080fd5b600080600080600060a08688031215611fc457600080fd5b611fcd86611f92565b9450602086015193506040860151925060608601519150611ff060808701611f92565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60006001820161202457612024611ffc565b5060010190565b601f82111561065b57600081815260208120601f850160051c810160208610156120525750805b601f850160051c820191505b818110156120715782815560010161205e565b505050505050565b815167ffffffffffffffff81111561209357612093611d5c565b6120a7816120a18454611f0b565b8461202b565b602080601f8311600181146120dc57600084156120c45750858301515b600019600386901b1c1916600185901b178555612071565b600085815260208120601f198616915b8281101561210b578886015182559484019460019091019084016120ec565b50858210156121295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103612144575050565b61214e8254611f0b565b67ffffffffffffffff81111561216657612166611d5c565b612174816120a18454611f0b565b6000601f8211600181146121a857600083156121905750848201545b600019600385901b1c1916600184901b178455610afa565b600085815260209020601f19841690600086815260209020845b838110156121e257828601548255600195860195909101906020016121c2565b50858310156121295793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b60208082526027908201527f596f75206d757374206f776e20746865206361726420746f2061646420697420604082015266746f206465636b60c81b606082015260800190565b8082018082111561048757610487611ffc565b808202811582820484141761048757610487611ffc565b634e487b7160e01b600052601260045260246000fd5b6000826122b8576122b8612293565b500690565b8181038181111561048757610487611ffc565b6000826122df576122df612293565b500490565b6000816122f3576122f3611ffc565b506000190190565b6000815161230d818560208601611b09565b9290920192915050565b6000815461232481611f0b565b6001828116801561233c576001811461235157612380565b60ff1984168752821515830287019450612380565b8560005260208060002060005b858110156123775781548a82015290840190820161235e565b50505082870194505b5050505092915050565b693d913730b6b2911d101160b11b815285516000906123b081600a850160208b01611b09565b61088b60f21b600a918401918201819052691134b6b0b3b2911d101160b11b600c8301526123e16016830189612317565b9081527f2261747472696275746573223a205b7b2274726169745f74797065223a20224360028201526f03630b9b9911610113b30b63ab2911d160851b602282015290506124326032820187612317565b9050611f4b60f21b81527f7b2274726169745f74797065223a202241747461636b222c202276616c75652260028201526101d160f51b60228201526124e06124d26124896124cc612497612489602487018b6122fb565b611f4b60f21b815260020190565b7f7b2274726169745f74797065223a2022446566656e6365222c202276616c75658152620111d160ed1b602082015260230190565b876122fb565b615d7d60f01b815260020190565b98975050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161252481601d850160208701611b09565b91909101601d0192915050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60ff818116838216019081111561048757610487611ffc565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061261490830184611b2d565b9695505050505050565b60006020828403121561263057600080fd5b8151611b0281611acf56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220749760427208e2cd86b0755fc88497142d1f38500ccba0ea1367f4efd2f6a4cf64736f6c6343000813003368747470733a2f2f667563687369612d64656665617465642d65726d696e652d3230382e6d7970696e6174612e636c6f75642f697066732f516d647a746a7379764b634c7a6a706341664e327957456772476334367641794b5455475a3661594643537475332f322e706e6768747470733a2f2f667563687369612d64656665617465642d65726d696e652d3230382e6d7970696e6174612e636c6f75642f697066732f516d647a746a7379764b634c7a6a706341664e327957456772476334367641794b5455475a3661594643537475332f332e706e6768747470733a2f2f667563687369612d64656665617465642d65726d696e652d3230382e6d7970696e6174612e636c6f75642f697066732f516d647a746a7379764b634c7a6a706341664e327957456772476334367641794b5455475a3661594643537475332f312e706e67",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063919f064911610104578063b88d4fde116100a2578063d77691ee11610071578063d77691ee14610430578063e7f3be5214610443578063e985e9c514610456578063f17f39b31461046957600080fd5b8063b88d4fde146103b2578063bb92947b146103c5578063c87b56dd146103d8578063d05dcc6a146103eb57600080fd5b80639ba82a33116100de5780639ba82a3314610364578063a22cb46514610384578063a607a8d914610397578063b16045bc1461039f57600080fd5b8063919f06491461033257806395d89b411461035257806398bdf6f51461035a57600080fd5b80633a3610bc1161017c5780636c9e4e251161014b5780636c9e4e25146102e657806370a08231146102f95780637afc86621461030c57806383acda611461031f57600080fd5b80633a3610bc146102a557806342842e0e146102ad5780636352211e146102c0578063691562a0146102d357600080fd5b8063095ea7b3116101b8578063095ea7b3146102475780631ac3a0fb1461025c57806323b872dd1461028a5780632dddd49c1461029d57600080fd5b806301ffc9a7146101df57806306fdde0314610207578063081812fc1461021c575b600080fd5b6101f26101ed366004611ae5565b61047c565b60405190151581526020015b60405180910390f35b61020f61048d565b6040516101fe9190611b59565b61022f61022a366004611b6c565b61051f565b6040516001600160a01b0390911681526020016101fe565b61025a610255366004611ba1565b610546565b005b61027c61026a366004611b6c565b600b6020526000908152604090205481565b6040519081526020016101fe565b61025a610298366004611bcb565b610660565b61027c610691565b61027c610716565b61025a6102bb366004611bcb565b61076c565b61022f6102ce366004611b6c565b610787565b61025a6102e1366004611c16565b6107e7565b61025a6102f4366004611c49565b610b01565b61027c610307366004611cbe565b610c22565b61020f61031a366004611b6c565b610ca8565b61027c61032d366004611b6c565b610d42565b61027c610340366004611b6c565b600c6020526000908152604090205481565b61020f610e20565b60075461027c9081565b610377610372366004611b6c565b610e2f565b6040516101fe9190611cd9565b61025a610392366004611d20565b610ee9565b61027c610ef8565b61027c6103ad366004611b6c565b610f4e565b61025a6103c0366004611d72565b610f59565b61027c6103d3366004611b6c565b610f91565b61020f6103e6366004611b6c565b610f9c565b6104216103f9366004611b6c565b60086020526000908152604090205460ff808216916101008104821691620100009091041683565b6040516101fe93929190611e64565b61020f61043e366004611b6c565b611050565b61027c610451366004611ba1565b611069565b6101f2610464366004611e9e565b61109a565b61025a610477366004611ec8565b6110c8565b6000610487826110e6565b92915050565b60606000805461049c90611f0b565b80601f01602080910402602001604051908101604052809291908181526020018280546104c890611f0b565b80156105155780601f106104ea57610100808354040283529160200191610515565b820191906000526020600020905b8154815290600101906020018083116104f857829003601f168201915b5050505050905090565b600061052a8261110b565b506000908152600460205260409020546001600160a01b031690565b600061055182610787565b9050806001600160a01b0316836001600160a01b0316036105c35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105df57506105df813361109a565b6106515760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016105ba565b61065b838361116d565b505050565b61066a33826111db565b6106865760405162461bcd60e51b81526004016105ba90611f45565b61065b83838361123a565b600080601060009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b9190611fac565b509195945050505050565b600080600e60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106e7573d6000803e3d6000fd5b61065b83838360405180602001604052806000815250610f59565b6000818152600260205260408120546001600160a01b0316806104875760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105ba565b60008160028111156107fb576107fb611e4e565b14806108185750600181600281111561081657610816611e4e565b145b806108345750600281600281111561083257610832611e4e565b145b6108705760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420636c61737360981b60448201526064016105ba565b601a805490600061088083612012565b9091555050601a546000808084600281111561089e5761089e611e4e565b03610927576108ae601654610f91565b91506108bb601454610f91565b6000848152600b60209081526040808320869055600c825280832084905580518082018252600381526242746360e81b81840152878452600a9092529091209192506109079082612079565b506000838152600960205260409020610921601782612139565b50610a58565b600184600281111561093b5761093b611e4e565b036109be5761094b601554610d42565b9150610958601554610d42565b6000848152600b60209081526040808320869055600c825280832084905580518082018252600381526208ae8d60eb1b81840152878452600a9092529091209192506109a49082612079565b506000838152600960205260409020610921601882612139565b60028460028111156109d2576109d2611e4e565b03610a58576109e2601454610f4e565b91506109ef601654610f4e565b6000848152600b60209081526040808320869055600c82528083208490558051808201825260048152634c696e6b60e01b81840152878452600a909252909120919250610a3c9082612079565b506000838152600960205260409020610a56601982612139565b505b6040518060600160405280856002811115610a7557610a75611e4e565b815260ff808516602080840191909152908416604092830152600086815260089091522081518154829060ff19166001836002811115610ab757610ab7611e4e565b02179055506020820151815460409093015162ffff001990931661010060ff9283160262ff0000191617620100009190931602919091179055610afa858461139e565b5050505050565b60038114610b475760405162461bcd60e51b81526020600482015260136024820152724465636b2073697a65206d757374206265203360681b60448201526064016105ba565b33610b688383600081610b5c57610b5c61220c565b90506020020135610787565b6001600160a01b031614610b8e5760405162461bcd60e51b81526004016105ba90612222565b33610ba583836001818110610b5c57610b5c61220c565b6001600160a01b031614610bcb5760405162461bcd60e51b81526004016105ba90612222565b33610be283836002818110610b5c57610b5c61220c565b6001600160a01b031614610c085760405162461bcd60e51b81526004016105ba90612222565b336000908152600d6020526040902061065b908383611a6f565b60006001600160a01b038216610c8c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105ba565b506001600160a01b031660009081526003602052604090205490565b600a6020526000908152604090208054610cc190611f0b565b80601f0160208091040260200160405190810160405280929190818152602001828054610ced90611f0b565b8015610d3a5780601f10610d0f57610100808354040283529160200191610d3a565b820191906000526020600020905b815481529060010190602001808311610d1d57829003601f168201915b505050505081565b600080610d4d610ef8565b90506000610d5a82610e2f565b9050600081600081518110610d7157610d7161220c565b602002602001015160ff169050600082600181518110610d9357610d9361220c565b602002602001015160ff169050600083600281518110610db557610db561220c565b602002602001015160ff169050600084600381518110610dd757610dd761220c565b602002602001015160ff16905060008882848688610df59190612269565b610dff9190612269565b610e099190612269565b610e13919061227c565b9998505050505050505050565b60606001805461049c90611f0b565b60606000610e3c836113b8565b67ffffffffffffffff811115610e5457610e54611d5c565b604051908082528060200260200182016040528015610e7d578160200160208202803683370190505b5080519091505b8015610ee257610e95600a856122a9565b82610ea16001846122bd565b81518110610eb157610eb161220c565b60ff90921660209283029190910190910152610ece600a856122d0565b935080610eda816122e4565b915050610e84565b5092915050565b610ef43383836113e1565b5050565b600080600f60009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106e7573d6000803e3d6000fd5b600080610d4d610691565b610f6333836111db565b610f7f5760405162461bcd60e51b81526004016105ba90611f45565b610f8b848484846114af565b50505050565b600080610d4d610716565b60606000611026610fac846114e2565b6000858152600960209081526040808320600a83528184206008909352922054610fdd90610100900460ff166114e2565b600088815260086020526040902054610ffe9062010000900460ff166114e2565b60405160200161101295949392919061238a565b60405160208183030381529060405261160e565b90508060405160200161103991906124ec565b604051602081830303815290604052915050919050565b60096020526000908152604090208054610cc190611f0b565b600d602052816000526040600020818154811061108557600080fd5b90600052602060002001600091509150505481565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6110d233846107e7565b6110dc33836107e7565b61065b33826107e7565b60006001600160e01b03198216632483248360e11b1480610487575061048782611760565b6000818152600260205260409020546001600160a01b031661116a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105ba565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906111a282610787565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111e783610787565b9050806001600160a01b0316846001600160a01b0316148061120e575061120e818561109a565b806112325750836001600160a01b03166112278461051f565b6001600160a01b0316145b949350505050565b826001600160a01b031661124d82610787565b6001600160a01b0316146112735760405162461bcd60e51b81526004016105ba90612531565b6001600160a01b0382166112d55760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105ba565b826001600160a01b03166112e882610787565b6001600160a01b03161461130e5760405162461bcd60e51b81526004016105ba90612531565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610ef48282604051806020016040528060008152506117b0565b6000805b8215610487576113cd600a846122d0565b9250806113d981612012565b9150506113bc565b816001600160a01b0316836001600160a01b0316036114425760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105ba565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6114ba84848461123a565b6114c6848484846117e3565b610f8b5760405162461bcd60e51b81526004016105ba90612576565b6060816000036115095750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611533578061151d81612012565b915061152c9050600a836122d0565b915061150d565b60008167ffffffffffffffff81111561154e5761154e611d5c565b6040519080825280601f01601f191660200182016040528015611578576020820181803683370190505b509050815b85156116055761158e6001826122bd565b9050600061159d600a886122d0565b6115a890600a61227c565b6115b290886122bd565b6115bd9060306125c8565b905060008160f81b9050808484815181106115da576115da61220c565b60200101906001600160f81b031916908160001a9053506115fc600a896122d0565b9750505061157d565b50949350505050565b6060815160000361162d57505060408051602081019091526000815290565b600060405180606001604052806040815260200161263c604091399050600060038451600261165c9190612269565b61166691906122d0565b61167190600461227c565b67ffffffffffffffff81111561168957611689611d5c565b6040519080825280601f01601f1916602001820160405280156116b3576020820181803683370190505b509050600182016020820185865187015b8082101561171f576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453506001830192506116c4565b505060038651066001811461173b576002811461174e5761070b565b603d6001830353603d600283035361070b565b603d6001830353509195945050505050565b60006001600160e01b031982166380ac58cd60e01b148061179157506001600160e01b03198216635b5e139f60e01b145b8061048757506301ffc9a760e01b6001600160e01b0319831614610487565b6117ba83836118e4565b6117c760008484846117e3565b61065b5760405162461bcd60e51b81526004016105ba90612576565b60006001600160a01b0384163b156118d957604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906118279033908990889088906004016125e1565b6020604051808303816000875af1925050508015611862575060408051601f3d908101601f1916820190925261185f9181019061261e565b60015b6118bf573d808015611890576040519150601f19603f3d011682016040523d82523d6000602084013e611895565b606091505b5080516000036118b75760405162461bcd60e51b81526004016105ba90612576565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611232565b506001949350505050565b6001600160a01b03821661193a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105ba565b6000818152600260205260409020546001600160a01b03161561199f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105ba565b6000818152600260205260409020546001600160a01b031615611a045760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105ba565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054828255906000526020600020908101928215611aaa579160200282015b82811115611aaa578235825591602001919060010190611a8f565b50611ab6929150611aba565b5090565b5b80821115611ab65760008155600101611abb565b6001600160e01b03198116811461116a57600080fd5b600060208284031215611af757600080fd5b8135611b0281611acf565b9392505050565b60005b83811015611b24578181015183820152602001611b0c565b50506000910152565b60008151808452611b45816020860160208601611b09565b601f01601f19169290920160200192915050565b602081526000611b026020830184611b2d565b600060208284031215611b7e57600080fd5b5035919050565b80356001600160a01b0381168114611b9c57600080fd5b919050565b60008060408385031215611bb457600080fd5b611bbd83611b85565b946020939093013593505050565b600080600060608486031215611be057600080fd5b611be984611b85565b9250611bf760208501611b85565b9150604084013590509250925092565b803560038110611b9c57600080fd5b60008060408385031215611c2957600080fd5b611c3283611b85565b9150611c4060208401611c07565b90509250929050565b60008060208385031215611c5c57600080fd5b823567ffffffffffffffff80821115611c7457600080fd5b818501915085601f830112611c8857600080fd5b813581811115611c9757600080fd5b8660208260051b8501011115611cac57600080fd5b60209290920196919550909350505050565b600060208284031215611cd057600080fd5b611b0282611b85565b6020808252825182820181905260009190848201906040850190845b81811015611d1457835160ff1683529284019291840191600101611cf5565b50909695505050505050565b60008060408385031215611d3357600080fd5b611d3c83611b85565b915060208301358015158114611d5157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611d8857600080fd5b611d9185611b85565b9350611d9f60208601611b85565b925060408501359150606085013567ffffffffffffffff80821115611dc357600080fd5b818701915087601f830112611dd757600080fd5b813581811115611de957611de9611d5c565b604051601f8201601f19908116603f01168101908382118183101715611e1157611e11611d5c565b816040528281528a6020848701011115611e2a57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b634e487b7160e01b600052602160045260246000fd5b6060810160038510611e8657634e487b7160e01b600052602160045260246000fd5b93815260ff9283166020820152911660409091015290565b60008060408385031215611eb157600080fd5b611eba83611b85565b9150611c4060208401611b85565b600080600060608486031215611edd57600080fd5b611ee684611c07565b9250611ef460208501611c07565b9150611f0260408501611c07565b90509250925092565b600181811c90821680611f1f57607f821691505b602082108103611f3f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b805169ffffffffffffffffffff81168114611b9c57600080fd5b600080600080600060a08688031215611fc457600080fd5b611fcd86611f92565b9450602086015193506040860151925060608601519150611ff060808701611f92565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b60006001820161202457612024611ffc565b5060010190565b601f82111561065b57600081815260208120601f850160051c810160208610156120525750805b601f850160051c820191505b818110156120715782815560010161205e565b505050505050565b815167ffffffffffffffff81111561209357612093611d5c565b6120a7816120a18454611f0b565b8461202b565b602080601f8311600181146120dc57600084156120c45750858301515b600019600386901b1c1916600185901b178555612071565b600085815260208120601f198616915b8281101561210b578886015182559484019460019091019084016120ec565b50858210156121295787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103612144575050565b61214e8254611f0b565b67ffffffffffffffff81111561216657612166611d5c565b612174816120a18454611f0b565b6000601f8211600181146121a857600083156121905750848201545b600019600385901b1c1916600184901b178455610afa565b600085815260209020601f19841690600086815260209020845b838110156121e257828601548255600195860195909101906020016121c2565b50858310156121295793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b60208082526027908201527f596f75206d757374206f776e20746865206361726420746f2061646420697420604082015266746f206465636b60c81b606082015260800190565b8082018082111561048757610487611ffc565b808202811582820484141761048757610487611ffc565b634e487b7160e01b600052601260045260246000fd5b6000826122b8576122b8612293565b500690565b8181038181111561048757610487611ffc565b6000826122df576122df612293565b500490565b6000816122f3576122f3611ffc565b506000190190565b6000815161230d818560208601611b09565b9290920192915050565b6000815461232481611f0b565b6001828116801561233c576001811461235157612380565b60ff1984168752821515830287019450612380565b8560005260208060002060005b858110156123775781548a82015290840190820161235e565b50505082870194505b5050505092915050565b693d913730b6b2911d101160b11b815285516000906123b081600a850160208b01611b09565b61088b60f21b600a918401918201819052691134b6b0b3b2911d101160b11b600c8301526123e16016830189612317565b9081527f2261747472696275746573223a205b7b2274726169745f74797065223a20224360028201526f03630b9b9911610113b30b63ab2911d160851b602282015290506124326032820187612317565b9050611f4b60f21b81527f7b2274726169745f74797065223a202241747461636b222c202276616c75652260028201526101d160f51b60228201526124e06124d26124896124cc612497612489602487018b6122fb565b611f4b60f21b815260020190565b7f7b2274726169745f74797065223a2022446566656e6365222c202276616c75658152620111d160ed1b602082015260230190565b876122fb565b615d7d60f01b815260020190565b98975050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161252481601d850160208701611b09565b91909101601d0192915050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60ff818116838216019081111561048757610487611ffc565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061261490830184611b2d565b9695505050505050565b60006020828403121561263057600080fd5b8151611b0281611acf56fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220749760427208e2cd86b0755fc88497142d1f38500ccba0ea1367f4efd2f6a4cf64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 99,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 101,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 105,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 109,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 113,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 119,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1150,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3058,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1722_storage"
      },
      {
        "astId": 3063,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "attributes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Attr)3048_storage)"
      },
      {
        "astId": 3067,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "imageMapping",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3071,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "classMapping",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3075,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "tokenIdAttack",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3079,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "tokenIdDefense",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3084,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "deckOfPlayer",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3087,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "priceFeedBtc",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 3090,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "priceFeedETH",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 3093,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "priceFeedLink",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 3097,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "btcuscAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 3100,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "ethusdAddress",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 3103,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "linkusdAddress",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 3106,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "highMultiplier",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3109,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "mediumMultiplier",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 3112,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "lowMultiplier",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 3115,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "btcImage",
        "offset": 0,
        "slot": "23",
        "type": "t_string_storage"
      },
      {
        "astId": 3118,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "ethImage",
        "offset": 0,
        "slot": "24",
        "type": "t_string_storage"
      },
      {
        "astId": 3121,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "linkImage",
        "offset": 0,
        "slot": "25",
        "type": "t_string_storage"
      },
      {
        "astId": 3124,
        "contract": "contracts/MarketClash.sol:MarketClash",
        "label": "currentTokenId",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_enum(Class)3040": {
        "encoding": "inplace",
        "label": "enum MarketClash.Class",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Attr)3048_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MarketClash.Attr)",
        "numberOfBytes": "32",
        "value": "t_struct(Attr)3048_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Attr)3048_storage": {
        "encoding": "inplace",
        "label": "struct MarketClash.Attr",
        "members": [
          {
            "astId": 3043,
            "contract": "contracts/MarketClash.sol:MarketClash",
            "label": "Class",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Class)3040"
          },
          {
            "astId": 3045,
            "contract": "contracts/MarketClash.sol:MarketClash",
            "label": "attack",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3047,
            "contract": "contracts/MarketClash.sol:MarketClash",
            "label": "defence",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1722_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1721,
            "contract": "contracts/MarketClash.sol:MarketClash",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}